name: Release

on:
  pull_request:
    paths:
      - .github/workflows/release.yml
  push:
    tags:
      - v*

env:
  CARGO_TERM_COLOR: always
  CARGO_REGISTRIES_CARTESI_INDEX: ${{ secrets.CARGO_REGISTRIES_CARTESI_INDEX }}
  CARGO_REGISTRIES_CARTESI_TOKEN: ${{ secrets.CARGO_REGISTRIES_CARTESI_TOKEN }}

jobs:
  publish-state-fold-types:
    name: 🌎 Publish state-fold-types crate
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat state-fold-types/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^state-fold-types$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish state-fold-types
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p state-fold-types
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await state-fold-types async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  publish-block-history:
    name: 🌎 Publish block-history crate
    needs: publish-state-fold-types
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat block-history/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^block-history$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish block-history
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p block-history
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await block-history async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  publish-state-fold:
    name: 🌎 Publish state-fold crate
    needs: publish-state-fold-types
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat state-fold/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^state-fold$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish state-fold
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p state-fold
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await state-fold async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  publish-state-server-common:
    name: 🌎 Publish state-server-common crate
    needs: publish-state-fold-types
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat state-server-common/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^state-server-common$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish state-server-common
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p state-server-common
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await state-server-common async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  publish-state-server-lib:
    name: 🌎 Publish state-server-lib crate
    needs:
      - publish-block-history
      - publish-state-fold
      - publish-state-fold-types
      - publish-state-server-common
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat state-server-lib/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^state-server-lib$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish state-server-lib
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p state-server-lib
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await state-server-lib async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  publish-state-client-lib:
    name: 🌎 Publish state-client-lib crate
    needs:
      - publish-state-fold-types
      - publish-state-server-common
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone repository
        uses: actions/checkout@v2
        with:
          submodules: recursive
          token: ${{ secrets.CI_TOKEN }}
      - name: 📦 Install Cloudsmith CLI
        run: pip install --upgrade cloudsmith-cli
      - name: 📦 Get crate version
        id: version
        run: echo "::set-output name=version::$(cat state-client-lib/Cargo.toml | grep -P '^version = ' | sed -e 's/[version = "]//g')"
      - name: 📦 Get cloudsmith API query
        id: query
        run: echo "::set-output name=query::$(echo 'name:^state-client-lib$ AND version:${{ steps.version.outputs.version }}')"
      - name: 📦 Get crate cloudsmith ID
        id: cloudsmith_id
        run: echo "::set-output name=cloudsmith_id::$(cloudsmith list packages --output-format json --query '${{ steps.query.outputs.query }}' cartesi/main 2> /dev/null | jq '.data[0].slug' | sed -e 's/^"//' -e 's/"$//')"
      - name: 📦 Install stable Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: 🌎 Publish state-client-lib
        uses: actions-rs/cargo@v1
        with:
          command: publish
          args: --registry=cartesi -p state-client-lib
        if: steps.cloudsmith_id.outputs.cloudsmith_id == 'null'
      - name: ⌛ Await state-client-lib async publishing
        run: .github/wait_for_package_sync.sh '${{ steps.query.outputs.query }}'

  sync:
    name: 🌎 Sync crates registry
    needs:
      - publish-state-fold-types
      - publish-block-history
      - publish-state-fold
      - publish-state-server-common
      - publish-state-server-lib
      - publish-state-client-lib
    runs-on: ubuntu-latest
    steps:
      - name: 📚 Clone provider's registry index repository
        run: git clone ${{ secrets.CARGO_REGISTRIES_CARTESI_INDEX }} cartesi-index
      - name: 🌎 Push changes to cartesi registry index repository
        uses: ad-m/github-push-action@master
        with:
          repository: cartesi/crates-index
          directory: cartesi-index
          github_token: ${{ secrets.CI_TOKEN }}
